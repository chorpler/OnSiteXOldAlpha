CONSOLE

MOMENT FORMATS
==============
Sunday, January 3rd 2015, 07:25 am  ==>  "dddd, MMMM Do YYYY, hh:mm a"
Sunday, January 03 2015, 21:23:43   ==>  "dddd, MMMM DD YYYY, HH:mm:ss"


var then1 = function(res) { Log.l("Success"); Log.l(res); res1 = res; return res;}; var t1 = then1; var then2 = function(res) { idnum = res.total_rows; Log.l("Set idnum to %d.", idnum);}; var t2 = then2; var catch1 = function(err) { Log.l("Failure"); Log.e(err); return err; }; var c1 = catch1; var yep = {include_docs:true}; var nope = {include_docs:false}; var idnum=0, out1 = "", out2 = "", out3 = ""; var then3 = function(res) { Log.l("Found %d docs! (Check out1, out2, out3 for results)", res.total_rows); idnum = res.total_rows+1; out1 = res; out2 = res.rows; out3 = res.rows[res.total_rows-1];}; var t3 = then3; var doc1 = {}; var mdoc = function() { var doc1 = {}; var docid = sprintf("%05d", idnum++); Log.l("Setting doc._id to '%s'.", docid); doc1._id = docid; doc1.first = "David"; doc1.last = "Sargeant"; doc1.document = "SecretDocumentFile"; Log.l(doc1); return doc1;}; var gen = rs.dbs.gen;

var woqo = rs.dbs.techwoqdb; var woqdb = woqo.directdb(); var wo1 = rs.code.getNewObject(4); var wo2 = rs.code.getNewObject(4); var wo3 = rs.code.getNewObject(4); rs.code.fullyFillWorkOrder(wo1); rs.code.fullyFillWorkOrder(wo2); rs.code.fullyFillWorkOrder(wo3);

rs.code.createRemoteDatabase('jobsites').
rs.code.createRemoteDatabase('geolocdb')

var user1 = { name: 'sesatech', password: 'sesatech3onsite'}; var pouchOpts = {skipSetup: true}; var ajaxOpts = {ajax:{headers:{Authorization: 'Basic ' + base64.encodeText(user1.name + ':' + user1.password)}}};
var db1 = new PouchDB('http://securedb.sesaonsite.com:5984/sesa-userdb', pouchOpts);

db1.login(user1.name, user1.password, ajaxOpts).then(function() { return db1.allDocs(); }).then(function(docs) { console.log(docs); }).catch(c1);

tpdb1.allDocs(yep).then(t3).catch(c1); Log.l("idnum now %d", idnum); var doc1 = mdoc(); 
/* Run next line if previous line's doc1 looks good	 */
tpdb1.put(doc1).then(t1).catch(c1);

var tdb1 = rs.dbs.userdb.redb('testdb'); var tpdb1 = tdb1.provider(); tdb1

doc1 = mdoc(); tpdb1.put(doc1).then(t1).catch(c1);

var strErr = "*** ERROR ***\nPlease call redb(dbname[, url])\nwhere dbname is the database name, and url is the optional remote URL.";
strErr += "\n";
strErr += "Example: redb('testdb') or redb('testdb', 'http://192.168.2.6:5984')\n\n";

PouchDB.debug.enable('pouchdb:*');
PouchDB.debug.disable('pouchdb:*');

var then1 = function(res) { Log.l("Success"); Log.l(res); res1 = res; return res;}; var catch1 = function(err) { Log.l("Failure"); Log.e(err); return err; };


tpdb1.allDocs(nope).then(t3).catch(c1); 
doc1 = {}; var docid = sprintf("%05d", idnum++); doc1._id = docid; doc1.first = "David"; doc1.last = "Sargeant"; doc1.document = "SecretDocumentFile"; Log.l(doc1); idnum++; var docid = sprintf("%05d", idnum++); doc1._id = docid; tpdb1.put(doc1).then(then1).catch(catch1);


var doc1 = {}; doc1._id = idnum++ + ""; doc1.first = "David"; doc1.last = "Sargeant"; doc1.document = "SecretDocumentFile"; doc1
doc1._id=idnum++ + ""; rs.dbs.userdb.testpouch.create(doc1).then(then1).catch(catch1);
// var tdb1 = rs.dbs.userdb.testpouch; var tpdb1 = tdb1.provider();
var tdb1 = rs.dbs.userdb.redb('testdb'); var tpdb1 = tdb1.provider();
tdb1.length(); tpdb1.allDocs({include_docs:true}).then(then1).catch(catch1);

for(int i = 0; i < tdb1.length(); i++) { var doc = tdb1.at(i); var strId = doc.$id; var idInt = sprintf("%05d", parseInt(strId)); Log.l("Doc ID: %s", idInt); tdb1.setPriority(strId, idInt); }

var arrObj = [];
for(var i = 10; i < 23; i++) {
  var tmpObj = {};
  tmpObj.name = sprintf("Item %02d", i);
  var randDate = Math.floor(Math.random() * (23 - 19 + 1) + 19);
  var strDate = sprintf("2015-07-%02d", randDate);
  tmpObj.date = moment(strDate, "YYYY-MM-DD");
}

var arrObj = []; for(var i = 10; i < 23; i++) {   var tmpObj = {};   tmpObj.name = sprintf("Item %02d", i);   var randDate = Math.floor(Math.random() * (23 - 19 + 1) + 19);   var strDate = sprintf("2015-07-%02d", randDate);   tmpObj.date = moment(strDate, "YYYY-MM-DD"); } 

var test1 = function(array, dateMatch) {
return array.filter(function(item) {
return moment(item.date).isSame(dateMatch, 'day');
})
}

var test1 = function(array, dateMatch) { return array.filter(function(item) { return moment(item.date).isSame(dateMatch, 'day'); }) }  

var test1 = function(array, dateMatch) {
  return array.filter(function(item) {
    if(moment(dateMatch).isValid()) {
      return moment(item.date).isSame(dateMatch, 'day');
    } else {
      return true;
    }
  })
};

var test1 = function(array, dateMatch) { return array.filter(function(item) { if(moment(dateMatch).isValid()) { return moment(item.date).isSame(dateMatch, 'day'); } else { return true; } }) }; 

Emmet:
-----

  Thank you for installing Emmet -- a toolkit that can greatly improve your workflow. Note that this plugin automatically downloads and installs PyV8 binary (see status bar message). 
  
  ******************************
  Please restart editor 
  to finish installation process 
  after PyV8 was downloaded.
  ******************************
  
  Tab key handler
  ==========================
  
  By default, Emmet allows you to expand abbreviations with Tab key in HTML, XML, HAML and CSS/SASS/LESS/Stylus documents. As a side effect, you canâ€™t use some of your ST2 snippets.
  
  Please read https://github.com/sergeche/emmet-sublime#tab-key-handler about how Tab handler works and how to tweak its behavior to match your needs.
  
  Enter key
  ==========================
  
  In HTML and XML documents, Emmet overrides Enter key to insert formatted line breaks between opening and closing tags. In some cases it will break character input (for example, in Japanese language).
  
  To disable Enter key handler, simply add the following option in your user's Preferences file:
  
  "disable_formatted_linebreak": true
  
  Actions shortcuts
  ==========================
  
  Emmet has a number of actions with keyboard shortcuts that may override ones you're using commonly (for example, Ctrl-E or Ctrl-Down). Please read the project main page to get list of available actions and keyboard shortcuts and how to disable them:
  https://github.com/sergeche/emmet-sublime
  
  Documentation and examples:
  http://emmet.io
  
  ------------------------------
  Follow me on Twitter: @emmetio
  ------------------------------
  
  
